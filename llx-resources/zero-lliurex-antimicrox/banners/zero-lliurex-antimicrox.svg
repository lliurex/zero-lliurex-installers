<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="235"
   height="110"
   viewBox="0 0 62.177082 29.104167"
   version="1.1"
   id="svg900"
   inkscape:version="1.3 (1:1.3+202307231459+0e150ed6c4)"
   sodipodi:docname="zero-lliurex-antimicrox.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview902"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:document-units="mm"
     showgrid="false"
     units="px"
     inkscape:zoom="2"
     inkscape:cx="141"
     inkscape:cy="-0.5"
     inkscape:window-width="1920"
     inkscape:window-height="882"
     inkscape:window-x="0"
     inkscape:window-y="0"
     inkscape:window-maximized="1"
     inkscape:current-layer="g1055"
     inkscape:showpageshadow="2"
     inkscape:deskcolor="#d1d1d1" />
  <defs
     id="defs897">
    <linearGradient
       id="linearGradient4689">
      <stop
         style="stop-color:#5a9fd4;stop-opacity:1;"
         offset="0"
         id="stop4691" />
      <stop
         style="stop-color:#306998;stop-opacity:1;"
         offset="1"
         id="stop4693" />
    </linearGradient>
    <linearGradient
       id="linearGradient4671">
      <stop
         style="stop-color:#ffd43b;stop-opacity:1;"
         offset="0"
         id="stop4673" />
      <stop
         style="stop-color:#ffe873;stop-opacity:1"
         offset="1"
         id="stop4675" />
    </linearGradient>
    <filter
       inkscape:collect="always"
       style="color-interpolation-filters:sRGB"
       id="filter1"
       x="-0.008239851"
       y="-0.061051103"
       width="1.0164797"
       height="1.1221022">
      <feGaussianBlur
         inkscape:collect="always"
         stdDeviation="0.13623797"
         id="feGaussianBlur1" />
    </filter>
  </defs>
  <g
     inkscape:label="Capa 1"
     inkscape:groupmode="layer"
     id="layer1">
    <g
       id="g1055"
       transform="translate(-73.918747,-37.647919)">
      <rect
         style="fill:#cccccc;stroke-width:0.251883"
         id="rect416"
         width="69.188515"
         height="33.470203"
         x="71.030525"
         y="35.956314" />
      <g
         transform="matrix(0.00493458,0.00217914,0.00217914,-0.00493458,57.772311,65.020404)"
         fill="#000000"
         stroke="none"
         id="g5-0"
         style="opacity:0.19">
        <path
           d="M 9173,10390 C 8674,10181 7996,9843 7300,9457 5074,8223 1840,6073 210,4744 36,4603 -8,4555 5,4522 c 4,-9 13,-53 19,-97 l 12,-80 149,-129 C 990,3523 2352,2560 4395,1240 5131,764 6288,30 6326,14 c 47,-20 83,-17 118,7 64,44 1425,1902 2776,3789 1458,2037 3573,5051 3574,5094 1,15 -26,35 -104,79 -772,434 -1807,915 -2924,1358 -376,150 -356,148 -593,49 z m 553,-89 c 717,-299 1351,-580 2078,-923 510,-241 502,-236 480,-253 -34,-26 -20,-29 -486,116 -158,49 -295,92 -305,95 -10,3 -7,-2 7,-10 14,-9 63,-28 110,-42 126,-39 144,-62 91,-115 -21,-21 -39,-29 -63,-29 -31,0 -277,75 -305,93 -43,27 20,117 81,117 h 36 v 85 c 0,47 -3,85 -6,85 -3,0 -27,-12 -53,-27 l -48,-26 -129,56 c -71,30 -228,95 -349,143 -121,48 -226,92 -233,97 -7,6 -10,17 -7,25 3,9 0,12 -9,9 -15,-6 -17,0 -32,86 -8,48 -19,54 -55,28 l -30,-22 -62,22 c -34,12 -109,42 -166,65 -57,24 -106,44 -108,44 -2,0 -3,-12 -1,-27 3,-25 18,-36 122,-89 74,-38 123,-70 131,-85 12,-21 10,-25 -16,-41 -48,-29 -81,-22 -229,52 -77,39 -144,70 -148,70 -9,0 -36,-50 -30,-55 2,-2 57,-30 124,-63 155,-78 158,-82 109,-132 -57,-58 -78,-55 -256,35 -81,41 -150,75 -153,75 -3,0 -6,-13 -6,-28 0,-25 9,-32 111,-82 170,-84 185,-101 131,-153 -23,-22 -37,-27 -78,-27 -45,0 -65,9 -193,86 -79,47 -144,84 -146,82 -1,-2 -21,-40 -43,-85 -31,-61 -38,-83 -29,-91 7,-5 64,-38 127,-73 63,-35 141,-83 173,-107 32,-24 63,-41 70,-38 7,4 23,13 37,21 22,13 28,12 55,-6 16,-11 90,-49 163,-84 107,-52 132,-68 132,-85 0,-12 -4,-19 -8,-16 -5,3 -28,-15 -52,-39 -50,-51 -70,-55 -111,-21 -16,14 -91,56 -168,95 l -140,71 -12,55 c -7,30 -14,55 -16,55 -2,0 -27,-16 -56,-35 -28,-19 -60,-35 -71,-35 -10,0 -78,35 -150,79 -201,120 -188,115 -221,81 l -27,-28 44,-25 c 23,-14 95,-53 158,-87 63,-34 116,-63 118,-65 14,-13 -90,-125 -115,-125 -10,0 -41,15 -68,33 -51,34 -301,177 -309,177 -7,0 -28,-69 -24,-81 2,-5 66,-45 143,-88 170,-94 173,-102 85,-160 -34,-23 -68,-41 -75,-41 -8,0 -29,9 -47,19 -18,11 -98,50 -177,86 l -145,66 -53,-53 c -29,-29 -53,-57 -53,-63 0,-5 63,-47 140,-93 77,-46 140,-87 140,-91 0,-5 -71,-78 -159,-164 -109,-107 -168,-157 -189,-161 -25,-6 -42,1 -103,42 -69,47 -300,175 -304,169 -6,-6 -55,-107 -55,-112 0,-3 68,-39 150,-80 96,-48 150,-81 150,-91 0,-29 -30,-72 -72,-103 -67,-49 -91,-45 -298,59 -99,50 -184,90 -189,90 -10,0 -38,-77 -30,-84 2,-2 68,-36 146,-75 146,-72 167,-91 161,-139 -2,-21 -16,-34 -58,-58 -30,-18 -65,-42 -77,-54 l -21,-21 -39,24 c -36,24 -373,207 -379,207 -6,0 -54,-98 -54,-109 0,-5 72,-53 160,-106 110,-66 160,-102 160,-114 0,-28 -133,-151 -163,-151 -26,0 -218,95 -349,173 l -78,47 -29,-59 -30,-58 162,-74 c 156,-72 161,-75 168,-108 6,-30 3,-38 -24,-64 -61,-58 -149,-117 -174,-117 -14,0 -62,24 -106,53 -159,104 -309,189 -317,181 -5,-5 -20,-37 -33,-71 l -26,-63 62,-34 c 34,-19 107,-59 162,-89 128,-71 130,-77 39,-168 -92,-93 -110,-98 -212,-59 -68,26 -261,129 -347,186 -28,18 -20,28 -69,-90 -11,-26 -12,-37 -3,-44 7,-5 80,-46 163,-91 142,-76 152,-84 157,-114 4,-28 -3,-39 -62,-100 -68,-71 -106,-97 -139,-97 -27,0 -201,90 -352,182 -69,42 -126,75 -127,74 -8,-7 -31,-171 -25,-174 34,-14 297,-181 306,-194 15,-25 3,-41 -80,-112 -74,-63 -133,-95 -175,-96 -55,0 -219,95 -391,225 l -46,36 -26,-78 c -14,-43 -26,-83 -26,-90 0,-6 72,-62 160,-124 104,-74 160,-119 160,-131 0,-22 -51,-73 -144,-143 -71,-53 -75,-55 -137,-55 h -64 l -195,121 -195,120 -27,-83 c -16,-45 -28,-85 -28,-89 0,-3 66,-48 148,-99 177,-112 182,-116 182,-149 0,-33 -4,-37 -65,-86 -27,-22 -78,-66 -112,-97 -57,-53 -66,-58 -109,-58 -53,0 -70,10 -327,177 -101,65 -159,98 -162,90 -32,-86 -54,-162 -48,-167 5,-4 74,-52 154,-108 155,-107 187,-143 158,-179 -37,-44 -245,-213 -275,-223 -32,-11 -39,-9 -87,23 -29,19 -142,92 -252,161 l -200,127 -22,-73 c -44,-143 -56,-120 122,-232 86,-55 163,-108 171,-120 37,-53 17,-79 -200,-271 l -79,-70 h -68 c -62,0 -70,3 -101,31 -38,36 -370,294 -378,294 -3,0 -24,-59 -46,-130 l -42,-130 137,-86 c 248,-158 246,-152 114,-271 -200,-180 -236,-203 -317,-203 -41,0 -51,6 -133,78 -142,125 -323,275 -327,271 -2,-2 -23,-66 -46,-143 -35,-115 -40,-141 -28,-151 7,-7 67,-54 133,-105 162,-126 175,-139 175,-171 0,-38 -36,-77 -140,-153 -147,-108 -241,-166 -269,-166 -56,0 -122,46 -353,245 -79,68 -144,123 -144,122 -1,-1 -23,-92 -49,-202 l -46,-200 46,-39 c 25,-22 152,-122 283,-223 228,-176 239,-183 283,-183 25,0 54,7 65,15 28,21 34,18 24,-15 -8,-26 -5,-35 20,-64 42,-47 557,-450 582,-454 26,-5 72,15 94,39 27,30 32,23 27,-40 -3,-32 -2,-65 3,-73 14,-24 612,-468 629,-468 25,0 56,19 98,59 l 38,36 -8,-30 c -4,-16 -8,-49 -8,-72 0,-36 7,-49 40,-84 22,-22 74,-64 115,-93 41,-29 169,-124 283,-210 177,-133 213,-156 244,-156 47,0 93,23 143,73 l 42,42 -21,-42 c -24,-49 -37,-120 -27,-157 4,-16 23,-35 50,-51 42,-24 501,-339 599,-410 56,-41 74,-43 112,-13 25,20 398,429 673,740 110,124 117,142 91,217 -14,39 -11,43 27,33 47,-13 60,-5 111,66 26,37 111,149 190,249 78,100 147,192 153,203 7,12 10,42 8,66 -3,48 -2,49 38,33 46,-17 68,-3 135,83 55,71 305,374 476,576 49,57 53,66 53,112 0,44 2,50 21,50 42,0 90,43 186,168 130,171 678,860 1283,1617 273,342 505,633 515,648 10,16 15,38 13,52 -4,21 -1,25 17,25 14,0 37,16 60,41 48,53 265,346 283,382 7,15 19,27 26,27 14,0 72,60 145,149 47,57 52,69 49,103 -3,35 -2,38 22,38 34,0 43,8 130,114 68,82 73,91 63,116 -9,23 -8,27 6,23 28,-7 67,33 177,178 117,156 133,194 108,275 -16,52 -15,53 84,27 50,-14 66,-15 69,-6 3,7 27,47 54,88 27,42 49,84 49,94 0,11 9,21 23,25 26,6 40,19 103,99 39,49 45,64 42,93 -4,32 -2,35 21,32 20,-2 29,5 49,42 13,25 35,59 48,77 20,27 24,43 24,108 v 76 l 30,-16 c 16,-8 38,-15 48,-15 20,0 74,63 204,239 40,54 83,104 95,111 30,18 93,114 93,144 0,18 4,23 18,19 10,-2 29,5 44,16 43,34 58,80 58,175 0,47 3,86 8,86 24,-2 407,-208 409,-220 C 12751,8876 6766,562 6534,270 6460,176 6447,166 6406,173 6332,185 5363,819 4075,1699 2452,2807 187,4410 89,4521 c -12,13 -15,28 -10,51 6,30 51,65 466,366 3082,2234 5271,3659 7250,4717 596,319 1532,773 1596,775 14,0 165,-58 335,-129 z m 907,-589 c 34,-16 84,-34 111,-41 65,-16 106,-38 106,-57 0,-22 -52,-72 -84,-80 -20,-5 -51,5 -124,38 -53,25 -115,51 -137,58 -22,7 -44,16 -49,20 -15,15 3,59 32,74 40,22 77,19 145,-12 z m -108,-144 c 118,-54 145,-72 145,-97 0,-28 -29,-59 -66,-71 -33,-11 -41,-9 -96,19 -33,18 -90,39 -126,47 -115,26 -136,54 -85,114 51,61 67,60 228,-12 z m 581,-67 c 45,-21 95,-42 112,-46 66,-14 79,-55 34,-106 -36,-41 -76,-41 -172,0 -41,18 -94,36 -119,42 -54,12 -71,25 -71,53 1,41 63,96 111,96 14,0 61,-17 105,-39 z m -776,-81 c 60,-27 113,-50 116,-50 15,0 44,-34 44,-51 0,-33 -22,-67 -54,-84 -41,-22 -65,-15 -228,67 -134,67 -141,78 -82,134 24,23 45,34 65,34 16,0 79,-22 139,-50 z m 616,-69 c 34,-16 87,-36 118,-45 59,-17 79,-38 66,-71 -26,-68 -122,-95 -200,-55 -24,12 -73,33 -109,47 -66,25 -111,56 -111,78 0,17 40,52 80,69 43,19 76,14 156,-23 z m -158,-150 c 49,-23 96,-41 104,-41 26,0 68,-40 68,-65 0,-37 -10,-55 -40,-70 -33,-17 -64,-9 -187,44 -39,17 -95,36 -122,42 -79,17 -86,58 -20,113 43,36 77,32 197,-23 z m 587,-38 c 22,-8 74,-23 115,-34 41,-11 80,-25 87,-31 35,-29 -6,-108 -56,-108 -14,0 -67,13 -118,29 -50,16 -114,32 -142,36 -87,12 -101,51 -39,108 26,25 35,28 71,21 23,-3 60,-13 82,-21 z m 648,-39 c 138,-40 208,-82 194,-118 -18,-45 -110,-71 -182,-52 -27,8 -81,19 -120,26 -82,13 -115,32 -115,63 0,35 78,103 123,106 5,1 50,-11 100,-25 z m -2161,-35 c 106,-62 228,-144 233,-159 4,-9 -3,-21 -17,-30 -12,-8 -39,-30 -59,-47 -20,-18 -46,-33 -58,-33 -12,0 -48,16 -79,36 -31,21 -94,56 -140,80 -87,44 -112,61 -112,74 0,13 124,98 150,103 14,2 26,5 27,6 1,0 26,-13 55,-30 z m 512,-54 c 45,-14 51,-14 68,2 17,15 18,15 18,-8 1,-21 18,-32 142,-89 78,-36 173,-85 210,-108 37,-24 73,-42 80,-40 7,3 19,-4 28,-14 8,-10 98,-62 200,-117 l 184,-99 37,19 c 30,15 38,16 42,5 5,-14 296,-116 329,-116 31,0 30,-20 -2,-70 -26,-41 -37,-50 -60,-50 -40,0 -154,25 -289,62 -110,31 -114,32 -127,13 -24,-33 -16,-40 63,-59 198,-46 273,-69 278,-87 3,-9 -3,-32 -15,-51 -11,-18 -20,-43 -20,-55 0,-28 -36,-39 -82,-25 -18,6 -53,14 -78,18 -54,8 -234,65 -278,88 l -31,16 -3,111 -3,112 -34,-53 -34,-52 -49,5 c -101,12 -378,99 -378,118 0,5 21,32 46,59 38,41 53,50 80,50 23,0 41,8 59,27 23,26 25,35 25,118 v 89 l -53,-52 -53,-52 -75,34 c -41,19 -114,48 -164,66 -49,17 -98,38 -107,47 -16,14 -16,18 -4,32 12,13 13,25 6,56 -9,40 -12,65 -7,65 1,0 24,-7 51,-15 z m 874,-39 c 48,-19 103,-37 122,-41 62,-12 70,-16 70,-35 0,-11 -14,-35 -31,-55 -27,-30 -37,-35 -75,-35 -42,0 -248,51 -283,70 -38,20 -42,36 -19,65 27,35 76,65 106,65 12,0 62,-15 110,-34 z m 516,-37 c 26,-15 64,-23 142,-30 115,-10 139,-18 149,-50 12,-38 -4,-64 -103,-167 -119,-123 -112,-122 -300,-56 -141,50 -162,66 -141,106 9,17 206,215 216,218 1,0 18,-9 37,-21 z m -2087,-68 c 129,-68 203,-117 203,-134 0,-6 -23,-35 -52,-64 -39,-39 -60,-53 -81,-53 -15,0 -88,27 -160,61 -129,59 -194,99 -203,123 -5,14 54,81 95,108 43,29 80,22 198,-41 z m 741,-97 c 97,-42 133,-62 141,-81 17,-37 13,-59 -11,-71 -13,-7 -35,-21 -49,-33 -39,-31 -82,-26 -210,24 -157,61 -209,87 -209,103 0,20 150,114 181,114 16,0 86,-25 157,-56 z M 9142,8679 c 65,-33 82,-35 120,-15 24,13 27,12 31,-5 3,-11 22,-26 44,-35 94,-39 178,-87 220,-124 57,-50 146,-93 193,-93 27,0 39,-5 46,-21 6,-13 59,-46 142,-89 123,-63 132,-69 121,-88 -15,-28 -141,-153 -282,-278 -107,-94 -120,-103 -150,-98 -17,2 -103,31 -189,63 -143,52 -158,60 -158,81 0,31 58,93 208,221 86,73 121,109 118,121 -3,9 -10,36 -16,59 -6,24 -16,54 -22,67 -10,23 -12,22 -53,-33 -23,-31 -65,-76 -93,-99 -74,-63 -97,-60 -307,36 -93,43 -171,84 -173,92 -1,8 28,38 69,69 69,53 71,55 65,90 -3,19 -9,62 -11,95 -5,51 -4,57 7,37 6,-13 38,-37 70,-53 z m 1009,-59 c 127,-51 189,-82 212,-108 21,-22 22,-20 -52,-75 -24,-17 -49,-36 -56,-41 -7,-5 -43,7 -96,31 -46,22 -128,57 -181,78 -70,26 -98,42 -98,54 0,21 116,100 147,101 13,0 68,-18 124,-40 z m 353,-249 c -8,-37 14,-52 204,-143 81,-39 159,-79 174,-89 37,-26 51,-24 105,17 30,23 54,34 67,31 12,-3 81,-23 154,-46 74,-23 144,-41 156,-41 13,0 31,-9 40,-19 16,-18 16,-21 1,-53 -22,-44 -105,-119 -125,-113 -8,2 -95,29 -194,60 -98,31 -185,54 -192,51 -15,-6 -84,-109 -84,-124 0,-5 69,-33 153,-62 83,-30 162,-57 174,-61 l 23,-8 -33,-57 c -19,-31 -60,-92 -93,-136 l -59,-80 -50,7 c -140,18 -405,104 -405,131 0,7 25,42 55,77 l 56,65 -3,111 -3,111 -46,-58 c -54,-67 -238,-272 -350,-389 -89,-94 -102,-98 -203,-64 -31,11 -118,34 -193,51 -75,17 -139,33 -142,35 -12,13 39,73 216,256 106,110 193,206 193,214 0,8 -5,48 -11,90 -6,42 -9,78 -6,81 3,3 37,-11 76,-30 102,-52 110,-50 181,40 33,41 60,82 60,90 0,8 5,14 10,14 14,0 72,41 83,58 13,20 17,14 11,-17 z m -1539,-55 c 106,-51 235,-136 235,-155 0,-13 -53,-56 -106,-87 l -45,-26 -47,18 c -61,23 -325,144 -334,152 -15,15 5,50 37,65 18,9 48,32 67,51 20,22 42,36 58,36 14,0 75,-24 135,-54 z m -228,-247 c 223,-105 229,-115 131,-211 -38,-37 -77,-68 -87,-68 -10,0 -79,29 -154,65 -75,36 -158,74 -184,84 -83,32 -67,83 49,161 75,50 74,50 245,-31 z m -293,-234 c 138,-64 206,-106 206,-127 0,-11 -123,-145 -147,-161 -8,-5 -30,2 -55,16 -39,22 -308,138 -350,151 -36,11 -21,52 35,98 85,72 110,87 142,88 17,0 92,-29 169,-65 z m 937,-7 c 185,-74 202,-86 179,-128 -20,-37 -129,-110 -165,-110 -30,0 -345,120 -372,143 -25,19 -12,50 45,107 78,79 88,79 313,-12 z m -379,-194 c 102,-37 228,-97 263,-127 26,-22 28,-28 20,-53 -12,-33 -104,-111 -142,-120 -32,-8 -72,5 -280,93 -98,41 -153,70 -153,79 0,26 133,127 188,144 15,5 28,9 29,9 1,1 35,-11 75,-25 z m -846,-75 c 205,-95 212,-99 197,-130 -6,-13 -36,-54 -67,-91 -55,-66 -58,-68 -102,-68 -37,0 -81,17 -235,92 -235,115 -232,108 -94,217 67,53 85,62 110,58 16,-3 102,-38 191,-78 z m 2425,-69 c 52,-16 134,-40 184,-53 94,-24 103,-32 91,-81 -3,-13 -24,-44 -47,-69 -29,-34 -48,-47 -68,-47 -14,0 -119,31 -231,68 -157,53 -205,73 -205,85 0,9 23,41 50,71 44,48 55,55 91,55 23,1 83,-12 135,-29 z m -824,-49 c 208,-75 236,-87 251,-109 12,-19 10,-24 -20,-51 -18,-16 -57,-44 -86,-62 l -53,-32 -42,20 c -23,11 -105,37 -182,57 -77,21 -151,43 -165,50 -53,25 -34,55 88,139 30,20 58,37 62,37 5,0 70,-22 147,-49 z m -1093,-80 c 33,-16 120,-48 191,-71 158,-52 159,-52 163,-77 4,-24 -63,-110 -121,-157 -36,-29 -40,-29 -81,-18 -24,6 -121,44 -217,85 -121,51 -175,79 -177,91 -4,18 148,176 169,176 6,0 39,-13 73,-29 z m -853,-61 c 105,-44 200,-87 210,-96 31,-28 23,-59 -23,-102 -66,-61 -136,-112 -155,-112 -32,0 -435,174 -444,192 -14,26 2,49 77,109 81,65 115,89 131,89 6,0 98,-36 204,-80 z m 2567,-75 c 216,-54 262,-75 262,-117 0,-29 -76,-135 -102,-142 -49,-13 -97,-4 -211,38 -65,25 -141,50 -170,57 -86,21 -87,25 -17,118 41,54 67,81 81,81 11,0 82,-16 157,-35 z m -996,-4 c 13,-6 92,-29 176,-52 207,-56 242,-87 165,-145 -21,-15 -57,-45 -80,-66 -52,-47 -71,-48 -193,-8 -52,16 -125,37 -164,46 -78,18 -118,34 -123,49 -3,11 57,96 108,153 31,34 66,41 111,23 z m -866,-192 c 99,-44 185,-87 193,-94 23,-23 5,-58 -68,-128 -87,-85 -101,-86 -255,-18 -61,27 -147,64 -191,81 -44,18 -85,39 -92,47 -19,24 2,54 76,110 94,71 114,83 137,83 12,0 102,-36 200,-81 z m -1037,-33 c 218,-115 246,-146 179,-203 -18,-16 -59,-54 -90,-85 -44,-46 -63,-58 -87,-58 -48,0 -334,152 -411,219 l -35,30 40,32 c 22,18 65,58 95,89 30,31 62,60 70,63 33,12 92,-9 239,-87 z m 2658,-32 c 135,-32 253,-71 276,-91 34,-32 20,-54 -125,-200 -144,-145 -164,-157 -206,-133 -9,6 -100,39 -202,73 -141,48 -186,67 -188,81 -3,13 39,62 134,157 160,160 141,153 311,113 z m -972,-38 c 181,-68 300,-124 303,-141 5,-23 -43,-89 -100,-137 -56,-46 -54,-46 -193,2 -75,25 -193,56 -291,76 -30,5 -37,30 -19,63 22,43 164,171 189,171 11,0 62,-15 111,-34 z m -968,-212 c 180,-75 213,-93 213,-117 0,-7 -30,-48 -66,-92 -36,-44 -72,-88 -81,-99 -27,-33 -92,-16 -298,79 -104,48 -198,95 -208,104 -28,27 -10,56 84,132 114,92 117,91 356,-7 z m -1088,-39 c 115,-58 212,-112 215,-121 3,-8 1,-25 -5,-37 -22,-41 -99,-125 -150,-162 -72,-53 -95,-48 -308,68 -169,93 -221,129 -221,152 0,31 214,205 253,205 4,0 102,-47 216,-105 z m 1821,-93 c 216,-59 236,-69 246,-134 5,-30 0,-39 -66,-103 l -71,-70 -57,1 c -43,1 -98,15 -225,61 -92,34 -179,68 -192,77 -35,23 -31,50 12,88 39,35 62,58 102,103 31,33 50,32 251,-23 z m 828,-38 c 147,-43 242,-104 257,-167 3,-12 -1,-41 -9,-63 -88,-249 -966,-1353 -1529,-1922 -272,-275 -345,-322 -432,-276 -16,9 -68,32 -115,51 -149,61 -329,155 -335,174 -3,10 0,29 7,42 7,14 441,498 963,1077 523,579 956,1062 964,1073 20,28 70,46 111,40 19,-3 72,-16 118,-29 z M 7824,6394 c 199,-76 246,-103 246,-142 0,-10 -45,-62 -99,-116 l -99,-99 -50,6 c -30,3 -87,24 -140,51 -49,25 -136,66 -193,91 -57,26 -109,53 -116,62 -18,24 3,56 95,146 71,69 84,77 118,77 23,0 116,-30 238,-76 z m -1194,-34 c 158,-79 274,-150 290,-180 15,-28 5,-42 -104,-148 -122,-118 -126,-119 -287,-26 -62,36 -162,90 -221,120 -58,29 -108,59 -111,66 -9,26 18,59 81,100 35,23 91,63 124,90 33,26 66,48 73,48 7,0 76,-32 155,-70 z m 1825,-63 c 11,-8 99,-38 195,-67 96,-29 187,-59 201,-66 58,-29 47,-63 -55,-164 l -77,-75 -57,1 c -42,0 -105,17 -242,63 -102,35 -195,69 -207,77 -28,17 -30,48 -5,72 10,9 41,38 68,63 27,25 62,60 77,78 31,34 69,40 102,18 z M 7277,6111 c 102,-52 324,-141 352,-141 10,0 26,-9 36,-20 33,-36 8,-84 -98,-188 -128,-125 -141,-126 -365,-8 -194,102 -254,138 -260,154 -5,15 33,51 152,150 98,79 119,86 183,53 z M 6270,5962 c 107,-57 203,-113 212,-124 28,-31 13,-67 -55,-132 -106,-101 -185,-156 -225,-156 -35,0 -138,57 -349,193 -126,80 -125,88 7,197 36,30 86,74 112,97 40,37 52,42 75,37 16,-4 116,-54 223,-112 z m 1993,-76 c 102,-36 208,-75 236,-87 79,-34 74,-53 -53,-177 -90,-89 -107,-102 -137,-102 -36,0 -443,170 -469,196 -13,13 -2,27 96,124 61,61 118,110 126,110 8,0 99,-29 201,-64 z M 7055,5647 c 261,-133 258,-126 127,-279 -35,-40 -72,-83 -82,-95 -15,-18 -29,-23 -69,-23 -44,0 -77,14 -273,113 -122,61 -227,119 -232,128 -8,14 13,39 108,130 124,120 150,138 194,131 15,-2 117,-50 227,-105 z m -1275,-81 c 229,-141 240,-149 240,-187 0,-24 -15,-41 -92,-106 -51,-43 -106,-93 -122,-110 -57,-63 -115,-45 -387,118 l -169,101 v 39 c 0,30 6,42 26,56 14,10 71,54 127,97 111,87 142,106 172,106 11,-1 103,-52 205,-114 z m 2122,-75 c 195,-76 241,-99 246,-124 8,-39 -124,-204 -190,-238 -52,-26 -71,-25 -210,21 -224,74 -353,153 -328,201 20,36 135,152 179,181 68,43 101,38 303,-41 z M 6563,5256 c 94,-46 188,-89 207,-96 19,-7 41,-18 48,-23 20,-15 14,-61 -14,-103 -38,-57 -132,-152 -183,-185 -77,-50 -101,-44 -339,75 -114,57 -214,111 -222,121 -10,12 -11,25 -4,52 7,29 32,57 114,130 116,104 152,125 193,117 15,-3 105,-43 200,-88 z M 5243,5135 c 232,-124 286,-160 287,-193 0,-31 -229,-245 -296,-277 -30,-14 -43,-15 -73,-6 -46,13 -405,233 -445,272 -27,26 -29,30 -17,56 14,31 9,27 190,150 75,51 145,93 156,93 11,0 100,-43 198,-95 z m 2281,-70 c 110,-47 208,-95 218,-105 9,-11 19,-39 23,-62 l 8,-43 -74,-67 c -41,-38 -98,-85 -128,-105 l -53,-37 -67,23 c -108,38 -454,190 -463,203 -5,9 35,56 125,146 124,124 134,132 171,132 26,0 103,-27 240,-85 z M 6106,4796 c 126,-62 236,-121 243,-130 9,-11 12,-29 8,-53 -5,-30 -27,-58 -119,-151 -113,-114 -153,-142 -205,-142 -34,0 -461,239 -482,270 -22,33 -6,62 74,129 41,34 92,84 113,109 41,50 86,82 118,82 11,0 124,-51 250,-114 z m -1455,-84 c 74,-43 174,-100 223,-127 95,-54 112,-75 101,-133 -5,-25 -25,-49 -91,-105 -145,-122 -237,-187 -266,-187 -17,0 -95,43 -216,119 -288,181 -292,184 -276,225 3,9 65,62 136,119 71,56 148,117 170,135 22,17 51,32 63,32 12,0 82,-35 156,-78 z m 2434,-121 c 110,-51 210,-99 223,-107 32,-21 29,-64 -9,-100 -17,-16 -57,-63 -90,-104 -115,-147 -141,-148 -434,-21 -115,51 -220,96 -232,101 -27,11 -31,56 -9,98 8,15 62,74 120,131 l 106,103 62,-4 c 53,-4 94,-19 263,-97 z M 5476,4364 c 228,-118 374,-221 374,-263 0,-26 -13,-40 -160,-170 -96,-86 -142,-120 -160,-120 -36,0 -531,249 -548,276 -12,19 -11,23 5,37 10,8 56,50 103,94 47,43 116,104 154,135 89,73 110,74 232,11 z M 4062,4192 c 73,-48 174,-114 225,-145 120,-75 129,-104 55,-168 -20,-18 -158,-147 -306,-288 -148,-141 -281,-264 -295,-273 -56,-38 -82,-28 -291,111 -277,184 -322,229 -272,279 9,9 100,85 202,169 102,83 253,208 335,277 121,101 156,125 182,125 23,1 65,-21 165,-87 z m 2468,-45 c 85,-41 177,-82 204,-92 53,-20 116,-73 116,-98 0,-18 -19,-42 -159,-200 -58,-65 -115,-120 -128,-123 -31,-8 -79,10 -283,108 -96,46 -203,95 -237,110 -50,21 -63,31 -63,48 0,34 27,71 92,125 33,28 89,76 124,108 73,67 107,87 149,87 17,0 100,-33 185,-73 z m 1176,-123 c 115,-58 219,-115 232,-127 41,-38 30,-66 -75,-194 -155,-189 -281,-329 -325,-364 -33,-26 -52,-34 -97,-37 -51,-4 -72,2 -186,49 -199,80 -338,145 -349,161 -5,8 -6,27 -2,41 10,40 440,537 486,562 57,32 95,21 316,-91 z M 4964,3791 c 80,-49 189,-115 241,-146 112,-66 126,-89 79,-135 -16,-16 -195,-182 -399,-369 -326,-301 -376,-343 -420,-356 -29,-9 -63,-13 -84,-9 -34,7 -249,138 -392,241 -93,66 -105,88 -82,144 13,34 65,82 317,292 166,139 340,287 388,330 95,84 139,109 179,102 15,-2 92,-45 173,-94 z m 1000,-182 c 313,-158 408,-220 388,-254 -21,-37 -1040,-1072 -1066,-1084 -46,-20 -136,-9 -194,25 -148,85 -389,240 -404,258 -22,27 -22,54 0,87 9,15 134,134 277,265 345,316 600,556 710,669 52,54 101,95 115,98 14,2 27,5 29,6 2,0 67,-31 145,-70 z m 918,-347 c 171,-75 337,-158 361,-179 23,-22 21,-62 -5,-100 -21,-28 -174,-221 -225,-282 -29,-35 -80,-33 -158,7 -33,17 -132,63 -220,102 -249,110 -305,151 -259,189 11,9 42,45 69,81 93,123 177,221 204,235 40,23 84,13 233,-53 z m -456,-638 c 136,-66 251,-130 274,-150 40,-37 56,-78 44,-116 -3,-12 -108,-125 -232,-252 -123,-127 -259,-270 -301,-319 -122,-142 -162,-141 -397,3 -81,50 -177,107 -213,127 -130,71 -152,99 -117,148 8,11 69,74 137,139 68,66 217,213 330,328 114,114 214,208 224,208 9,0 122,-52 251,-116 z"
           id="path1-6" />
        <path
           d="m 8662,9691 c -7,-21 -12,-41 -12,-45 0,-3 54,-33 120,-66 144,-72 151,-86 65,-143 -64,-43 -88,-38 -247,58 -78,47 -144,85 -147,85 -8,0 -51,-67 -51,-78 0,-4 64,-37 143,-73 167,-75 176,-88 102,-137 -26,-17 -60,-34 -76,-37 -38,-9 -124,22 -267,95 l -113,57 -44,-86 -43,-87 114,-57 c 63,-31 114,-63 113,-69 0,-7 -26,-34 -59,-60 -87,-71 -108,-69 -275,32 -73,44 -139,82 -147,85 -10,4 -24,-8 -41,-34 -15,-22 -27,-42 -27,-44 0,-2 68,-36 150,-77 179,-88 183,-94 93,-165 -52,-40 -64,-45 -109,-45 -45,0 -61,6 -128,50 -42,28 -113,73 -158,100 -90,54 -79,55 -122,-12 l -17,-26 146,-88 c 81,-48 150,-94 153,-102 8,-22 -8,-42 -77,-94 -74,-57 -99,-60 -167,-17 -69,44 -307,179 -315,179 -8,0 -35,-108 -28,-113 2,-2 65,-30 139,-63 86,-38 136,-66 138,-77 5,-23 -127,-153 -162,-159 -30,-6 -27,-8 -249,121 -88,50 -160,91 -162,91 -4,0 -115,-279 -115,-290 0,-6 5,-10 11,-10 6,0 111,-49 234,-110 249,-123 287,-132 342,-87 15,13 57,43 93,67 73,49 80,56 80,88 0,12 5,22 12,22 24,0 278,175 278,192 0,11 6,15 20,11 13,-3 32,5 55,26 20,17 76,58 125,91 50,33 90,67 90,76 0,8 5,12 10,9 8,-5 148,81 249,152 3,2 -5,47 -17,101 -12,53 -25,108 -28,122 l -5,25 13,-23 c 17,-27 95,-65 167,-81 29,-6 54,-11 57,-11 12,0 127,117 135,138 7,17 16,22 43,22 22,0 51,12 82,33 103,69 114,80 114,109 0,26 2,27 20,16 17,-11 22,-10 34,7 8,11 44,43 80,70 l 65,50 1,120 v 119 l -48,-47 c -69,-68 -81,-66 -262,43 -83,50 -152,90 -154,90 -1,0 -8,-17 -14,-39 z"
           id="path2-2" />
        <path
           d="m 6305,8188 c -16,-74 -25,-121 -23,-123 2,-2 55,-31 118,-65 134,-74 150,-86 150,-115 0,-32 -116,-138 -175,-161 l -47,-18 -52,29 c -28,16 -117,70 -199,121 -136,86 -147,91 -152,71 -19,-85 -25,-120 -21,-125 3,-2 63,-36 133,-76 l 128,-71 3,-42 3,-41 -83,-55 c -92,-61 -126,-77 -167,-77 -25,0 -284,152 -369,217 -18,14 -35,23 -36,22 -3,-3 -21,-59 -51,-157 -3,-7 52,-40 144,-86 82,-41 151,-82 155,-92 9,-23 -9,-41 -122,-120 -140,-96 -153,-97 -285,-7 -104,71 -263,173 -271,173 -10,0 -117,-343 -110,-350 15,-13 421,-240 459,-256 47,-19 114,-18 147,4 14,9 85,64 157,122 113,90 131,108 131,133 0,15 4,26 9,23 18,-12 80,19 196,99 206,140 204,138 205,163 0,13 4,21 9,17 9,-5 95,50 261,170 56,40 86,68 88,83 3,18 8,21 28,16 13,-3 24,-2 24,2 1,5 72,56 160,114 158,105 158,105 159,143 1,22 -7,50 -17,65 -10,15 -34,63 -52,107 -39,92 -41,95 -48,76 -11,-32 -86,-101 -126,-116 l -43,-17 -104,52 c -94,47 -186,98 -276,152 l -32,19 z"
           id="path3-6" />
        <path
           d="m 4266,6777 c -14,-51 -26,-98 -26,-104 0,-7 65,-58 145,-113 80,-56 145,-107 145,-113 0,-20 -106,-114 -178,-156 -39,-24 -92,-49 -119,-57 -46,-14 -48,-14 -88,15 -86,61 -375,239 -379,233 -14,-24 -56,-196 -49,-202 4,-4 63,-44 131,-89 71,-47 122,-88 122,-97 0,-25 -66,-109 -124,-158 -75,-65 -164,-116 -200,-116 -29,1 -128,66 -387,256 l -47,34 -41,-110 c -22,-61 -41,-114 -41,-119 0,-5 63,-46 140,-92 77,-46 140,-89 140,-95 0,-15 -127,-134 -203,-191 -74,-54 -148,-93 -178,-93 -24,0 -107,59 -301,216 -100,81 -128,99 -132,86 -3,-9 -21,-93 -41,-187 -20,-93 -38,-177 -41,-186 -3,-12 61,-62 248,-194 222,-157 257,-179 297,-182 46,-5 47,-4 294,179 l 247,183 -3,37 -2,36 28,-14 c 24,-13 31,-13 60,1 80,38 442,332 460,374 7,15 20,26 32,27 19,0 211,131 384,261 46,35 88,63 92,63 12,0 16,33 7,58 -7,21 -5,22 42,22 45,0 58,6 157,77 286,204 297,213 281,271 -5,20 -33,95 -60,166 l -51,129 -20,-29 c -62,-88 -208,-193 -280,-201 -40,-5 -49,0 -212,112 -93,65 -182,126 -196,136 l -26,19 z"
           id="path4-1" />
        <path
           d="m 1486,4893 c -3,-10 -23,-94 -45,-188 -30,-129 -37,-173 -28,-181 7,-6 124,-98 261,-204 267,-207 267,-207 341,-178 42,17 546,379 574,412 12,14 4,30 -55,123 -37,60 -87,137 -112,171 l -44,64 -18,-29 c -28,-46 -104,-110 -218,-183 -59,-38 -122,-80 -141,-95 -23,-17 -41,-23 -55,-19 -32,10 -238,157 -443,316 -7,6 -13,3 -17,-9 z"
           id="path5" />
      </g>
      <g
         id="g17"
         transform="matrix(0.0462314,0,0,0.0462314,76.035399,39.650386)">
        <g
           id="g2">
          <path
             d="M 504.595,297.417 449.122,142.124 C 435.826,104.903 400.568,80.057 361.043,80.057 H 150.956 c -39.525,0 -74.783,24.845 -88.079,62.067 L 7.405,297.417 c -13.922,38.973 -7.987,82.285 15.905,116.077 17.318,24.493 53.611,24.62 71.1,0.249 l 55.094,-76.776 c 6.832,-9.521 17.833,-15.167 29.551,-15.167 h 153.889 c 11.719,0 22.719,5.646 29.551,15.167 l 55.094,76.776 c 17.489,24.371 53.782,24.244 71.1,-0.249 23.893,-33.792 29.828,-77.104 15.906,-116.077 z"
             fill="#407093"
             id="path1" />
        </g>
        <g
           id="g3">
          <path
             d="M 504.596,297.417 449.123,142.124 C 435.827,104.903 400.569,80.057 361.044,80.057 h -86.062 c 39.525,0 74.783,24.845 88.079,62.067 l 55.473,155.293 c 12.459,34.879 9.002,73.226 -8.984,105.121 l 8.041,11.205 c 17.489,24.371 53.782,24.244 71.1,-0.249 23.891,-33.792 29.826,-77.104 15.905,-116.077 z"
             fill="#2b4d66"
             id="path2" />
        </g>
        <g
           id="g4">
          <path
             d="m 177.426,144.772 h -19.794 c -1.148,0 -2.078,-0.931 -2.078,-2.078 V 122.9 c 0,-3.444 -2.792,-6.235 -6.235,-6.235 h -21.337 c -3.444,0 -6.235,2.792 -6.235,6.235 v 19.794 c 0,1.148 -0.931,2.078 -2.078,2.078 H 99.874 c -3.444,0 -6.235,2.792 -6.235,6.235 v 21.337 c 0,3.444 2.792,6.235 6.235,6.235 h 19.794 c 1.148,0 2.078,0.931 2.078,2.078 v 19.794 c 0,3.444 2.792,6.235 6.235,6.235 h 21.337 c 3.444,0 6.235,-2.792 6.235,-6.235 v -19.794 c 0,-1.148 0.931,-2.078 2.078,-2.078 h 19.794 c 3.444,0 6.235,-2.792 6.235,-6.235 v -21.337 c 0.001,-3.443 -2.791,-6.235 -6.234,-6.235 z"
             fill="#dae7ef"
             id="path3" />
        </g>
        <g
           id="g6">
          <g
             id="g5">
            <path
               d="m 177.426,144.772 h -7.316 v 14.021 c 0,3.444 -2.792,6.235 -6.235,6.235 h -14.597 c -4.018,0 -7.274,3.257 -7.274,7.274 V 186.9 c 0,3.444 -2.792,6.235 -6.235,6.235 h -14.021 v 7.316 c 0,3.444 2.792,6.235 6.235,6.235 h 21.337 c 3.444,0 6.235,-2.792 6.235,-6.235 v -19.794 c 0,-1.148 0.931,-2.078 2.078,-2.078 h 19.794 c 3.444,0 6.235,-2.792 6.235,-6.235 v -21.337 c -0.001,-3.443 -2.793,-6.235 -6.236,-6.235 z"
               fill="#c1d5e4"
               id="path4" />
          </g>
        </g>
        <g
           id="g7">
          <circle
             cx="313.92401"
             cy="253.095"
             fill="#dae7ef"
             r="37.824001"
             id="circle5" />
        </g>
        <g
           id="g8">
          <circle
             cx="198.198"
             cy="253.095"
             fill="#dae7ef"
             r="37.824001"
             id="circle6" />
        </g>
        <g
           id="g9">
          <path
             d="m 323.266,216.436 c 0.759,2.988 1.165,6.118 1.165,9.342 0,20.89 -16.934,37.824 -37.824,37.824 -3.224,0 -6.354,-0.406 -9.342,-1.165 4.16,16.371 18.994,28.482 36.659,28.482 20.89,0 37.824,-16.934 37.824,-37.824 0,-17.665 -12.111,-32.5 -28.482,-36.659 z"
             fill="#c1d5e4"
             id="path7" />
        </g>
        <g
           id="g10">
          <path
             d="m 207.54,216.436 c 0.759,2.988 1.165,6.118 1.165,9.342 0,20.89 -16.934,37.824 -37.824,37.824 -3.224,0 -6.354,-0.406 -9.342,-1.165 4.159,16.371 18.994,28.482 36.659,28.482 20.89,0 37.824,-16.934 37.824,-37.824 0,-17.665 -12.111,-32.499 -28.482,-36.659 z"
             fill="#c1d5e4"
             id="path8" />
        </g>
        <circle
           cx="256.16501"
           cy="152.464"
           fill="#dae7ef"
           r="22.492001"
           id="circle9" />
        <path
           d="m 264.999,131.775 c 1.16,2.712 1.803,5.698 1.803,8.834 0,12.422 -10.07,22.492 -22.492,22.492 -3.136,0 -6.122,-0.644 -8.834,-1.803 3.433,8.03 11.403,13.658 20.689,13.658 12.422,0 22.492,-10.07 22.492,-22.492 0,-9.286 -5.628,-17.256 -13.658,-20.689 z"
           fill="#c1d5e4"
           id="path9" />
        <g
           id="g12">
          <path
             d="m 372.918,121.096 c -6.973,0 -12.626,5.653 -12.626,12.626 0,6.973 5.653,12.626 12.626,12.626 6.974,0 12.626,-5.653 12.626,-12.626 0,-6.973 -5.652,-12.626 -12.626,-12.626 z"
             fill="#f6e266"
             id="path10" />
          <path
             d="m 372.918,202.466 c 6.974,0 12.626,-5.653 12.626,-12.626 0,-6.973 -5.653,-12.626 -12.626,-12.626 -6.973,0 -12.626,5.653 -12.626,12.626 0,6.973 5.653,12.626 12.626,12.626 z"
             fill="#86f1a7"
             id="path11" />
          <circle
             cx="400.97699"
             cy="161.78101"
             fill="#dd5790"
             r="12.626"
             id="circle11" />
          <path
             d="m 357.486,161.781 c 0,-6.973 -5.653,-12.626 -12.627,-12.626 -6.973,0 -12.626,5.653 -12.626,12.626 0,6.973 5.653,12.626 12.626,12.626 6.974,10e-4 12.627,-5.653 12.627,-12.626 z"
             fill="#61a2f9"
             id="path12" />
        </g>
        <g
           id="g14">
          <g
             id="g13">
            <path
               d="m 313.923,298.419 c -24.992,0 -45.324,-20.332 -45.324,-45.324 0,-24.992 20.332,-45.324 45.324,-45.324 24.992,0 45.324,20.333 45.324,45.324 0,24.991 -20.331,45.324 -45.324,45.324 z m 0,-75.648 c -16.721,0 -30.324,13.604 -30.324,30.324 0,16.72 13.604,30.324 30.324,30.324 16.72,0 30.324,-13.603 30.324,-30.324 0,-16.721 -13.603,-30.324 -30.324,-30.324 z"
               fill="#dd5790"
               id="path13" />
          </g>
        </g>
        <g
           id="g16">
          <g
             id="g15">
            <path
               d="m 198.198,298.419 c -24.992,0 -45.324,-20.333 -45.324,-45.324 0,-24.991 20.332,-45.324 45.324,-45.324 24.992,0 45.324,20.333 45.324,45.324 0,24.991 -20.332,45.324 -45.324,45.324 z m 0,-75.648 c -16.721,0 -30.324,13.604 -30.324,30.324 0,16.72 13.604,30.324 30.324,30.324 16.72,0 30.324,-13.604 30.324,-30.324 0,-16.72 -13.604,-30.324 -30.324,-30.324 z"
               fill="#dd5790"
               id="path14" />
          </g>
        </g>
      </g>
      <g
         id="g1"
         transform="translate(-1.0583333)">
        <path
           style="font-size:7.05556px;font-family:'EA Font v1.5 by Ghettoshark';-inkscape-font-specification:'EA Font v1.5 by Ghettoshark';opacity:0.88;fill:#000000;stroke-width:0.274059;filter:url(#filter1)"
           d="m 97.550199,49.025035 h 1.873449 q 0.167719,0 0.214108,0.5888 l 0.927814,4.692542 q -0.0179,0.07135 -0.10706,0.07135 h -1.106231 q -0.142738,0 -0.178425,-0.42822 -0.117756,-0.770792 -0.178423,-0.838593 h -0.553114 -0.463899 q -0.06779,0 -0.231951,1.195441 l -0.07135,0.07135 h -1.213285 l -0.0535,-0.05354 q 0.517427,-2.615691 0.76722,-4.139432 l 0.231952,-1.08838 q 0.07494,-0.07135 0.142738,-0.07135 z m 0.463903,3.086729 0.01785,0.01785 h 0.678013 l 0.03571,-0.03571 -0.339007,-1.891289 -0.01786,-0.01786 h -0.01786 q -0.0821,0 -0.164149,0.624489 -0.192698,1.074108 -0.192698,1.302489 z m 3.140288,-3.086729 h 1.71287 q 0.1,0.07852 0.48175,1.284653 l 0.5888,1.748552 h 0.0538 l -0.003,-2.894031 q 0.0323,-0.139174 0.0752,-0.139174 h 1.21326 l 0.0538,0.0535 v 5.245659 l -0.0538,0.05353 h -1.65934 q -0.11419,0 -0.16058,-0.249794 l -0.94563,-2.801253 h -0.0538 v 0.16058 2.747723 q 0,0.142744 -0.10701,0.142744 h -1.19548 l -0.0538,-0.05353 v -5.245663 z m 4.83526,0 h 3.37221 l 0.0538,0.0535 -0.003,0.838592 q -0.0179,0.142738 -0.12485,0.142738 h -0.87074 q -0.12487,0 -0.12487,0.124897 v 4.050219 q 0,0.142744 -0.10707,0.142744 h -1.07055 q -0.12491,0 -0.12491,-0.178427 v -3.22946 -0.838592 l -0.1,-0.07135 h -0.84574 q -0.17841,-0.01068 -0.17841,-0.0821 v -0.76722 -0.06067 q 0.0214,-0.124896 0.12492,-0.124896 z m 4.03237,0 h 1.14196 q 0.0713,0.02496 0.0713,0.160579 v 5.138604 l -0.0538,0.05352 h -1.15976 q -0.0714,-0.02496 -0.0714,-0.160586 v -5.031554 q 0,-0.135602 0.0714,-0.160579 z m 1.90919,0 h 1.7307 q 0.0855,0.06067 0.24977,0.999172 l 0.51745,2.729882 h 0.0889 q 0.0358,0 0.57095,-2.926145 0.12844,-0.802909 0.19627,-0.802909 h 1.90913 l 0.0538,0.0535 v 4.942342 q 0.0145,0.392531 -0.10706,0.356848 h -0.99915 q -0.1249,0 -0.1249,-0.285482 v -3.354364 l -0.0497,-0.07135 h -0.0752 q -0.0855,0 -0.78502,3.675529 l -0.0538,0.03571 h -1.12405 q -0.0855,0 -0.78507,-3.657688 l -0.0716,-0.06425 q -0.12133,0.0034 -0.12491,0.08207 v 3.443577 q 0.007,0.203405 -0.0889,0.196269 h -1.01703 q -0.0716,-0.02496 -0.0716,-0.160586 v -5.031543 q 0.0214,-0.160579 0.16061,-0.160579 z m 5.93791,0 h 1.1419 q 0.0715,0.02496 0.0715,0.160579 v 5.138604 l -0.0538,0.05352 h -1.15976 q -0.0713,-0.02496 -0.0713,-0.160586 v -5.031554 q 0,-0.135602 0.0713,-0.160579 z m 2.9654,0 h 2.01619 q 0.16055,0 0.16055,0.196269 v 0.749379 q 0,0.196262 -0.19621,0.196262 h -1.6772 q -0.13918,-0.0069 -0.14277,0.142743 l -0.003,2.769136 q 0.0214,0.171286 0.17842,0.192698 h 1.68073 q 0.16061,0 0.16061,0.124897 v 0.83859 q 0,0.14274 -0.10706,0.14274 h -2.2838 q -0.35689,-0.07852 -0.66021,-0.374691 -0.33899,-0.371124 -0.33899,-0.909964 l -0.003,-2.819094 0.003,-0.08921 q 0,-0.367552 0.33899,-0.785066 0.40327,-0.356847 0.82077,-0.356847 z m 2.76556,0 h 2.42657 q 0.46389,0.110626 0.74937,0.463904 0.21411,0.239086 0.21411,0.892116 v 0.410372 q 0,0.610212 -0.21411,0.802909 l -0.0714,0.08921 v 0.03571 q 0.30332,0.285477 0.30332,0.785064 v 1.766396 q -0.0462,0.107055 -0.14275,0.107055 h -0.99915 q -0.14276,0 -0.14276,-0.160585 V 52.48647 q -0.0538,-0.303317 -0.30332,-0.303317 h -0.49955 l -0.0716,0.07135 v 1.926978 q 0,0.196269 -0.14271,0.196269 h -1.0063 q -0.10347,0 -0.14277,-0.160586 l -0.0106,-5.1386 z m 1.24896,1.088386 v 1.0527 l 0.0538,0.05352 h 0.5531 q 0.21053,0 0.26762,-0.321165 v -0.570952 q -0.0641,-0.285481 -0.35683,-0.285481 h -0.44604 z m 3.56848,-1.088386 h 1.76641 q 0.3176,0.06425 0.62446,0.374689 0.26767,0.378261 0.26767,0.606642 l 0.0179,0.481744 v 2.283826 q 0,0.945641 -0.1427,0.945641 -0.13202,0.317594 -0.57096,0.5888 l -0.19627,0.07135 h -1.76643 q -0.50312,-0.167721 -0.78507,-0.660172 -0.0889,-0.174856 -0.0889,-0.535269 v -2.979675 q 0,-0.892122 0.87427,-1.177598 z m 0.42824,1.266807 v 2.676356 q 0,0.339006 0.21412,0.339006 0.67801,0.03571 0.67801,-0.178423 l 0.0179,-0.160583 v -2.622827 q 0.0179,-0.267634 -0.21406,-0.303322 h -0.53531 q -0.19627,0.07135 -0.16056,0.249793 z m 2.81911,-1.266807 h 1.30247 q 0.11417,0 0.30333,0.410372 l 0.5888,0.981331 q 0.13913,-0.185557 0.82072,-1.373861 l 0.0714,-0.01786 h 1.30252 l 0.0359,0.03571 q -1.49881,2.59785 -1.49881,2.640673 1.49881,2.597849 1.49881,2.640669 l -0.0359,0.03571 h -1.28467 q -0.11416,0 -0.24977,-0.339007 -0.0889,-0.107055 -0.62451,-1.070544 h -0.0358 q -0.0538,0.03213 -0.82078,1.391708 l -0.0889,0.01786 h -1.28461 q -0.0358,0 -0.0358,-0.05353 1.49874,-2.583573 1.49874,-2.640668 -0.0965,-0.221245 -1.49874,-2.622829 z"
           id="text1-2"
           aria-label="AntiMicroX" />
        <path
           style="font-size:7.05556px;font-family:'EA Font v1.5 by Ghettoshark';-inkscape-font-specification:'EA Font v1.5 by Ghettoshark';fill:#ffd42a;stroke-width:0.274059"
           d="m 97.046832,48.687511 h 1.873449 q 0.167719,0 0.214108,0.5888 l 0.927811,4.692542 q -0.0179,0.07135 -0.10706,0.07135 h -1.106228 q -0.142738,0 -0.178425,-0.42822 -0.117756,-0.770792 -0.178423,-0.838593 H 97.93895 97.475051 q -0.06779,0 -0.231951,1.195441 l -0.07135,0.07135 h -1.213285 l -0.0535,-0.05354 q 0.517427,-2.615691 0.76722,-4.139432 l 0.231952,-1.08838 q 0.07494,-0.07135 0.142738,-0.07135 z m 0.463903,3.086729 0.01785,0.01785 h 0.678013 l 0.03571,-0.03571 -0.339007,-1.891289 -0.01786,-0.01786 h -0.01786 q -0.0821,0 -0.164149,0.624489 -0.192698,1.074108 -0.192698,1.302489 z m 3.140285,-3.086729 h 1.71286 q 0.1,0.07852 0.48175,1.284653 l 0.5888,1.748552 h 0.0538 l -0.003,-2.894031 q 0.0323,-0.139174 0.0752,-0.139174 h 1.21325 l 0.0538,0.0535 v 5.245659 l -0.0538,0.05353 h -1.65933 q -0.11419,0 -0.16058,-0.249794 l -0.94563,-2.801253 h -0.0538 v 0.16058 2.747723 q 0,0.142744 -0.10701,0.142744 h -1.19547 l -0.0538,-0.05353 v -5.245663 z m 4.83524,0 h 3.37221 l 0.0538,0.0535 -0.003,0.838592 q -0.0179,0.142738 -0.12485,0.142738 h -0.87074 q -0.12487,0 -0.12487,0.124897 v 4.050219 q 0,0.142744 -0.10707,0.142744 h -1.07055 q -0.12491,0 -0.12491,-0.178427 v -3.22946 -0.838592 l -0.1,-0.07135 h -0.84574 q -0.17841,-0.01068 -0.17841,-0.0821 v -0.76722 -0.06067 q 0.0214,-0.124896 0.12492,-0.124896 z m 4.03237,0 h 1.14196 q 0.0713,0.02496 0.0713,0.160579 v 5.138604 l -0.0538,0.05352 h -1.15976 q -0.0714,-0.02496 -0.0714,-0.160586 v -5.031554 q 0,-0.135602 0.0714,-0.160579 z m 1.90919,0 h 1.7307 q 0.0855,0.06067 0.24977,0.999172 l 0.51745,2.729882 h 0.0889 q 0.0358,0 0.57095,-2.926145 0.12844,-0.802909 0.19627,-0.802909 h 1.90913 l 0.0538,0.0535 v 4.942342 q 0.0145,0.392531 -0.10706,0.356848 h -0.99915 q -0.1249,0 -0.1249,-0.285482 v -3.354364 l -0.0497,-0.07135 h -0.0752 q -0.0855,0 -0.78502,3.675529 l -0.0538,0.03571 h -1.12405 q -0.0855,0 -0.78507,-3.657688 l -0.0716,-0.06425 q -0.12133,0.0034 -0.12491,0.08207 v 3.443577 q 0.007,0.203405 -0.0889,0.196269 h -1.01703 q -0.0716,-0.02496 -0.0716,-0.160586 v -5.031543 q 0.0214,-0.160579 0.16061,-0.160579 z m 5.93791,0 h 1.1419 q 0.0715,0.02496 0.0715,0.160579 v 5.138604 l -0.0538,0.05352 h -1.15976 q -0.0713,-0.02496 -0.0713,-0.160586 v -5.031554 q 0,-0.135602 0.0713,-0.160579 z m 2.9654,0 h 2.01619 q 0.16055,0 0.16055,0.196269 v 0.749379 q 0,0.196262 -0.19621,0.196262 h -1.6772 q -0.13918,-0.0069 -0.14277,0.142743 l -0.003,2.769136 q 0.0214,0.171286 0.17842,0.192698 h 1.68073 q 0.16061,0 0.16061,0.124897 v 0.83859 q 0,0.14274 -0.10706,0.14274 h -2.2838 q -0.35689,-0.07852 -0.66021,-0.374691 -0.33899,-0.371124 -0.33899,-0.909964 l -0.003,-2.819094 0.003,-0.08921 q 0,-0.367552 0.33899,-0.785066 0.40327,-0.356847 0.82077,-0.356847 z m 2.76556,0 h 2.42657 q 0.46389,0.110626 0.74937,0.463904 0.21411,0.239086 0.21411,0.892116 v 0.410372 q 0,0.610212 -0.21411,0.802909 l -0.0714,0.08921 v 0.03571 q 0.30332,0.285477 0.30332,0.785064 v 1.766396 q -0.0462,0.107055 -0.14275,0.107055 h -0.99915 q -0.14276,0 -0.14276,-0.160585 v -1.730716 q -0.0538,-0.303317 -0.30332,-0.303317 h -0.49955 l -0.0716,0.07135 v 1.926978 q 0,0.196269 -0.14271,0.196269 h -1.0063 q -0.10347,0 -0.14277,-0.160586 l -0.0106,-5.1386 z m 1.24896,1.088386 v 1.0527 l 0.0538,0.05352 h 0.5531 q 0.21053,0 0.26762,-0.321165 V 49.99 q -0.0641,-0.285481 -0.35683,-0.285481 h -0.44604 z m 3.56848,-1.088386 h 1.76641 q 0.3176,0.06425 0.62446,0.374689 0.26767,0.378261 0.26767,0.606642 l 0.0179,0.481744 v 2.283826 q 0,0.945641 -0.1427,0.945641 -0.13202,0.317594 -0.57096,0.5888 l -0.19627,0.07135 h -1.76643 q -0.50312,-0.167721 -0.78507,-0.660172 -0.0889,-0.174856 -0.0889,-0.535269 v -2.979675 q 0,-0.892122 0.87427,-1.177598 z m 0.42824,1.266807 v 2.676356 q 0,0.339006 0.21412,0.339006 0.67801,0.03571 0.67801,-0.178423 l 0.0179,-0.160583 v -2.622827 q 0.0179,-0.267634 -0.21406,-0.303322 h -0.53531 q -0.19627,0.07135 -0.16056,0.249793 z m 2.81911,-1.266807 h 1.30247 q 0.11417,0 0.30333,0.410372 l 0.5888,0.981331 q 0.13913,-0.185557 0.82072,-1.373861 l 0.0714,-0.01786 h 1.30252 l 0.0359,0.03571 q -1.49881,2.59785 -1.49881,2.640673 1.49881,2.597849 1.49881,2.640669 l -0.0359,0.03571 h -1.28467 q -0.11416,0 -0.24977,-0.339007 -0.0889,-0.107055 -0.62451,-1.070544 h -0.0358 q -0.0538,0.03213 -0.82078,1.391708 l -0.0889,0.01786 h -1.28461 q -0.0358,0 -0.0358,-0.05353 1.49874,-2.583573 1.49874,-2.640668 -0.0965,-0.221245 -1.49874,-2.622829 z"
           id="text1"
           aria-label="AntiMicroX" />
      </g>
    </g>
    <script
       id="mesh_polyfill"
       type="text/javascript">&#10;!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();&#10;</script>
  </g>
  <script
     id="script1169"
     type="text/javascript">&#10;!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();&#10;</script>
</svg>
